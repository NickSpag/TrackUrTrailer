// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using TrackUrTrailer.Standard;
using System.Collections.ObjectModel;
using MapKit;
using CoreLocation;
using System.Linq;

namespace TrackUrTrailer.iOS
{
    public partial class MapViewController : UIViewController
    {
        private MapViewModel viewModel;
        private ObservableCollection<IMapAnnotation> annotations => viewModel.Annotations;

        public MapViewController(IntPtr handle) : base(handle)
        {
            viewModel = new MapViewModel();
        }

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();

            await viewModel.GetData();

            AnnotateMap();
            CenterMap();
        }

        private void CenterMap()
        {
            var centeringCords = (TUTMapAnnotation)annotations.FirstOrDefault();
            var coordinate = centeringCords.Coordinate;

            var span = new MKCoordinateSpan(Help.Map.MilesToLatitudeDegrees(2),
                                            Help.Map.MilesToLongitudeDegrees(2, coordinate.Latitude));

            Map.Region = new MKCoordinateRegion(coordinate, span);
        }

        private void AnnotateMap()
        {
            foreach (TUTMapAnnotation annotation in annotations)
            {
                Map.AddAnnotation(annotation);
            }
        }

        /// <summary>
        /// Converts miles to latitude degrees
        /// </summary>
        public double MilesToLatitudeDegrees(double miles)
        {
            double earthRadius = 3960.0;
            double radiansToDegrees = 180.0 / Math.PI;
            return (miles / earthRadius) * radiansToDegrees;
        }

        /// <summary>
        /// Converts miles to longitudinal degrees at a specified latitude
        /// </summary>
        public double MilesToLongitudeDegrees(double miles, double atLatitude)
        {
            double earthRadius = 3960.0;
            double degreesToRadians = Math.PI / 180.0;
            double radiansToDegrees = 180.0 / Math.PI;

            // derive the earth's radius at that point in latitude
            double radiusAtLatitude = earthRadius * Math.Cos(atLatitude * degreesToRadians);
            return (miles / radiusAtLatitude) * radiansToDegrees;
        }
    }
}
